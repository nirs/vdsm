#!/usr/bin/python3
#
# Copyright 2019 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
#
# Refer to the README and COPYING files for full details of the license
#
import optparse
import os
import platform
import subprocess
import sys

parser = optparse.OptionParser(usage="make-target [options] NAME")

parser.add_option("-s", "--lun-size", dest='lun_size', type='int',
                  help="LUN size in GiB (default 100)")
parser.add_option("-n", "--lun-count", dest='lun_count', type='int',
                  help="Number of LUNs (default 10)")
parser.add_option("-r", "--root-dir", dest='root_dir',
                  help="root directory (default /target)")
parser.add_option("-i", "--iqn-base", dest='iqn_base',
                  help="iqn base name (default iqn.2003-01.org)")
parser.add_option(
    "--cache",
    action="store_true",
    help="Enable write cache. Enabling write cache improves performance "
         "but increases the chance of data loss. May cause trouble when "
         "running many services on the same server, but works fine if "
         "server is used only for storage. (default False).")

parser.set_defaults(root_dir="/target",
                    lun_size=100,
                    lun_count=10,
                    iqn_base="iqn.2003-01.org",
                    cache=False)

opts, args = parser.parse_args()

if not args:
    parser.error("target name required")

target_name = args[0]

host_name = platform.node()
if "." in host_name:
    host_name = host_name.split(".", 1)[0]

target_iqn = opts.iqn_base + "." + host_name + "." + target_name
target_dir = os.path.join(opts.root_dir, target_name)

print()
print("Creating target")
print("  target_name:   %s" % target_name)
print("  target_iqn:    %s" % target_iqn)
print("  target_dir:    %s" % target_dir)
print("  lun_count:     %s" % opts.lun_count)
print("  lun_size:      %s GiB" % opts.lun_size)
print("  cache:         %s" % opts.cache)
print()

reply = input("Create target? [N/y]: ")

if reply.strip().lower() != "y":
    sys.exit(0)

print("Creating target directory %r" % target_dir)
os.makedirs(target_dir)

print("Creating target %r" % target_iqn)
subprocess.check_call(["targetcli", "/iscsi", "create", target_iqn])

print("Setting permissions (any host can access this target)")
portal_path = "/iscsi/%s/tpg1" % target_iqn
subprocess.check_call(["targetcli", portal_path, "set", "attribute",
                       "authentication=0",
                       "demo_mode_write_protect=0",
                       "generate_node_acls=1",
                       "cache_dynamic_acls=1"])


print("Creating disks")

fileio_path = "/backstores/fileio"
luns_path = "/iscsi/%s/tpg1/luns" % target_iqn
write_back = "write_back={}".format("true" if opts.cache else "false")

for n in range(opts.lun_count):
    file_name = "%02d" % n
    file_path = os.path.join(target_dir, file_name)
    backstore_name = target_name + "-" + file_name
    backstore_path = os.path.join(fileio_path, backstore_name)

    print("Creating backing file %r" % file_path)
    subprocess.check_call(["truncate", "-s", "%dG" % opts.lun_size, file_path])

    print("Creating backing store %r" % backstore_path)
    subprocess.check_call(["targetcli", fileio_path, "create", backstore_name,
                           file_path, write_back])

    subprocess.check_call(["targetcli", backstore_path, "set", "attribute",
                           # Enable Thin Provisioning Unmap (blkdiscard).
                           "emulate_tpu=1",
                           # Enable Thin Provisioning Write Same
                           # (blkdiscard -z).
                           "emulate_tpws=1",
                           # Fix write same limit, client see this as 32M, but
                           # default value is 4096.
                           "max_write_same_len=65335"])

    print("Adding lun for %r" % backstore_path)
    subprocess.check_call(["targetcli", luns_path, "create", backstore_path])

print("Saving configuration")
subprocess.check_call(["targetcli", "saveconfig"])

print("Target added successfully")
